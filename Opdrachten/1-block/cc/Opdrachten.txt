2.

1	3	loadAI	rarp, @d	=>	r1
2	4	loadI	2		=>	r2
5	5	add	r1, r2		=> 	r1
6	8	loadAI	rarp, @a	=>	r2
7	9	loadAI	rarp, @b	=>	r3
10	10	add	r2, r3		=>	r2
11	12	mult	r1, r2		=>	r1
13	15	storeAI	r1		=>	rarp, @d

3.
Assuming loadAI takes 3 clock cycles, multiplication 2 and addition 1:
The previous set of instructions:

Start	End
1	3	loadAI	rarp, @d	=>	r1
2	4	loadI	2		=>	r2
4	4	add	r1, r2		=> 	r1
5	7	loadAI	rarp, @a	=>	r2
6	8	loadAI	rarp, @b	=>	r3
9	9	add	r2, r3		=>	r2
10	11	mult	r1, r2		=>	r1
12	14	storeAI	r1		=>	rarp, @d


The 'faster' set of instructions:

Start	End
1	3	loadAI	rarp, @d	=>	r1
2	4	loadI	2		=>	r2
3	5	loadAI	rarp, @a	=>	r3
4	6	loadAI	rarp, @b	=>	r4
5	5	add	r1, r2		=>	r1
7	7	add	r3, r4		=>	r3
8	9	mult	r1, r3		=>	r1
10	12	storeAI	r1		=>	rarp, @d


